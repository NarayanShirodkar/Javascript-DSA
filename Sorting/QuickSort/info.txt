Quick sort

Like merge sort, exploits the fact that arrays of 0 or 1 elements are always sorted.
Works by selecting one element(called pivot) and finding the index where the pivot should
    end up in the sorted array.
Once the pivot is positioned appropriately, quick sort can be applied on either side 
    of the pivot.


Helper

In order to implement merge sort, its useful to implement a function responsible
    arranging elements, in an array on either side of pivot.
Given an array, this helper fucntion should designate an element as the pivot
It should then rearrange elements in the array so that all values less than the 
    pivot are moved to the left of the pivot, and all values greater than the pivot are 
    moved to the right of the pivot.


Picking a pivot

The runtime of quick sort depends in part on how one selects the pivot
Ideally, the pivot should be chosen so that its roighly the median value in 
    the data set you are sorting


Pivot Pseudocode

It will help to accept three arguments: an array, a start index, and an end index
    (these can default to 0 and the array length minus 1,respectively)
Grab the pivot from the start of ther array
Store the current pivot index in a variable(this will keep track of where the pivot 
    should end up)
Loop through the array froms start to the end 
    if the pivot is greater than the current element, icrement the pivot index variable 
        and then swap the current element with the element at the pivot index.
Swap the starting element (i.e. the pivot) with the pivot index.
Return the pivot index


Quick sort Pseudocode

Call the pivot helper on the array
When the helper returns to you the updated pivot index, recursively call the pivot 
    helper on the subarray to the left of that index, and the subarray to the right of 
    that index.

Time Complexity => O(n*logn)  Best, Average  O(n*n) Worst
Space => O(n)